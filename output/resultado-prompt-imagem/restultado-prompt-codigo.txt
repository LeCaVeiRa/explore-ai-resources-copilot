import heapq

def dijkstra(graph, start):
    # Inicializa as distâncias com infinito e o ponto de partida com 0
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Cria uma fila de prioridade e adiciona o nó inicial
    priority_queue = [(0, start)]
    
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Se a distância atual for maior que a já registrada, ignora
        if current_distance > distances[current_node]:
            continue
        
        # Atualiza as distâncias para os vizinhos
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return distances

# Exemplo de uso
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 6},
    'C': {'A': 4, 'B': 2, 'D': 3},
    'D': {'B': 6, 'C': 3}
}

start_node = 'A'
distances = dijkstra(graph, start_node)
print(f"Distâncias a partir do nó {start_node}: {distances}")